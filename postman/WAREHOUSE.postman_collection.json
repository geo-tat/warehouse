{
	"info": {
		"_postman_id": "d00dd876-32f8-4155-b31e-a76140dd08b9",
		"name": "WAREHOUSE",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28154397"
	},
	"item": [
		{
			"name": "Products",
			"item": [
				{
					"name": "create product 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const uuid = pm.response.json().id;\r",
									"pm.globals.set('id', uuid);\r",
									"console.log(uuid);\r",
									"\r",
									"pm.test(\"Status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"pm.test(\"Has product create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test product 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"});\r",
									"pm.test(\"Test product 'sku' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('sku');\r",
									"    pm.expect(jsonData.sku, '\"sku\" must be \"ABC123\"').to.eql('ABC123');\r",
									"});\r",
									"pm.test(\"Test product 'name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData.name, '\"name\" must be \"Название товара\"').to.eql('Название товара');\r",
									"});\r",
									"pm.test(\"Test product 'description' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('description');\r",
									"    pm.expect(jsonData.description, '\"description\" field must be \"Описание товара\"').to.eql('Описание товара');    \r",
									"});\r",
									"pm.test(\"Test product 'category' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('category');\r",
									"    pm.expect(jsonData.category, '\"category\" field must be \"Категория товара\"').to.eql('Категория товара');\r",
									"});\r",
									"pm.test(\"Test product 'price' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('price');\r",
									"    pm.expect(jsonData.price, '\"price\" field must be \"19.99\"').to.eql(19.99);\r",
									"});\r",
									"pm.test(\"Test product 'quantity' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('quantity');\r",
									"    pm.expect(jsonData.quantity, '\"quantity\" field must be \"100\"').to.eql(100);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"sku\": \"ABC123\",\r\n    \"name\": \"Название товара\",\r\n    \"description\": \"Описание товара\",\r\n    \"category\": \"Категория товара\",\r\n    \"price\": 19.99,\r\n    \"quantity\": 100\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/products",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "create product 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"pm.test(\"Has product create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test product 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"});\r",
									"pm.test(\"Test product 'sku' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('sku');\r",
									"    pm.expect(jsonData.sku, '\"sku\" must be \"ABC2\"').to.eql('ABC2');\r",
									"});\r",
									"pm.test(\"Test product 'name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData.name, '\"name\" must be \"Название 2\"').to.eql('Название 2');\r",
									"});\r",
									"pm.test(\"Test product 'description' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('description');\r",
									"    pm.expect(jsonData.description, '\"description\" field must be \"Описание 2\"').to.eql('Описание 2');    \r",
									"});\r",
									"pm.test(\"Test product 'category' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('category');\r",
									"    pm.expect(jsonData.category, '\"category\" field must be \"Категория 2\"').to.eql('Категория 2');\r",
									"});\r",
									"pm.test(\"Test product 'price' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('price');\r",
									"    pm.expect(jsonData.price, '\"price\" field must be \"319.99\"').to.eql(319.99);\r",
									"});\r",
									"pm.test(\"Test product 'quantity' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('quantity');\r",
									"    pm.expect(jsonData.quantity, '\"quantity\" field must be \"200\"').to.eql(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"sku\": \"ABC2\",\r\n    \"name\": \"Название 2\",\r\n    \"description\": \"Описание 2\",\r\n    \"category\": \"Категория 2\",\r\n    \"price\": 319.99,\r\n    \"quantity\": 200\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/products",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "update product 1 with same quantity",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"pm.test(\"Has product create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test product 'sku' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('sku');\r",
									"    pm.expect(jsonData.sku, '\"sku\" must be \"ABC123\"').to.eql('ABC123');\r",
									"});\r",
									"pm.test(\"Test product 'name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData.name, '\"name\" must be \"Название товара изменено\"').to.eql('Название товара изменено');\r",
									"});\r",
									"pm.test(\"Test product 'description' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('description');\r",
									"    pm.expect(jsonData.description, '\"description\" field must be \"Описание товара\"').to.eql('Описание товара');    \r",
									"});\r",
									"pm.test(\"Test product 'category' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('category');\r",
									"    pm.expect(jsonData.category, '\"category\" field must be \"Категория товара\"').to.eql('Категория товара');\r",
									"});\r",
									"pm.test(\"Test product 'price' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('price');\r",
									"    pm.expect(jsonData.price, '\"price\" field must be \"19.99\"').to.eql(25.99);\r",
									"});\r",
									"pm.test(\"Test product 'quantity' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('quantity');\r",
									"    pm.expect(jsonData.quantity, '\"quantity\" field must be \"50\"').to.eql(100);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Название товара изменено\",\r\n    \"price\": 25.99\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/products/{{id}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"products",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update product 1 and change quantity",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"pm.test(\"Has product create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test product 'sku' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('sku');\r",
									"    pm.expect(jsonData.sku, '\"sku\" must be \"ABC123\"').to.eql('ABC123');\r",
									"});\r",
									"pm.test(\"Test product 'name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData.name, '\"name\" must be \"Название товара изменено\"').to.eql('Название товара изменено');\r",
									"});\r",
									"pm.test(\"Test product 'description' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('description');\r",
									"    pm.expect(jsonData.description, '\"description\" field must be \"Описание товара\"').to.eql('Описание товара');    \r",
									"});\r",
									"pm.test(\"Test product 'category' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('category');\r",
									"    pm.expect(jsonData.category, '\"category\" field must be \"Категория товара\"').to.eql('Категория товара');\r",
									"});\r",
									"pm.test(\"Test product 'price' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('price');\r",
									"    pm.expect(jsonData.price, '\"price\" field must be \"25.99\"').to.eql(25.99);\r",
									"});\r",
									"pm.test(\"Test product 'quantity' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('quantity');\r",
									"    pm.expect(jsonData.quantity, '\"quantity\" field must be \"50\"').to.eql(50);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"quantity\": 50\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/products/{{id}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"products",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Test list products response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/products",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "get product 1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Пользователи должны содержать поля: id, name, email\", function () {\r",
									"    pm.expect(target).to.have.property('id');\r",
									"    pm.expect(target).to.have.property('name');\r",
									"    pm.expect(target).to.have.property('sku');\r",
									"    pm.expect(target).to.have.property('description');\r",
									"    pm.expect(target).to.have.property('price');\r",
									"    pm.expect(target).to.have.property('quantity');\r",
									"});\r",
									"pm.test(\"Test user 'email' field\", function () {\r",
									"\r",
									"     pm.expect(target).to.have.property('name');\r",
									"    pm.expect(target.name, '\"name\" must be \"Название товара\"').to.eql('Название товара изменено');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/products/{{id}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"products",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete product 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/products/{{id}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"products",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get all products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Test list products response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/products",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"products"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Validation",
			"item": [
				{
					"name": "get product with invalid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"      pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/products/{{id}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"products",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "create product with non unique sku",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"      pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"sku\": \"ABC2\",\r\n    \"name\": \"Название 3\",\r\n    \"description\": \"Описание 3\",\r\n    \"category\": \"Категория 3\",\r\n    \"price\": 3319.99,\r\n    \"quantity\": 10\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/products",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "create product without name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"      pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"sku\": \"ABC123\",\r\n    \"description\": \"Описание товара\",\r\n    \"category\": \"Категория товара\",\r\n    \"price\": 19.99,\r\n    \"quantity\": 100\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/products",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"products"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "uid",
			"value": "1",
			"type": "string"
		}
	]
}